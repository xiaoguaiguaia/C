#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#define ROW 3
#define COL 3
void menu()
{
    printf("************************\n");
    printf("**** 1.play  0.exit ****\n");
    printf("************************\n");
}
void InitBoard(char board[ROW][COL],int row,int col)
{
    int i = 0;
    int j = 0;
    for (i=0;i<row;i++)
    {
        for (j=0;j<col;j++)
        {
            board[i][j] = ' ';
        }
    }
}
void DisplayBoard(char board[ROW][COL],int row,int col)
{
    int i = 0;
    for (i=0;i<row;i++)
    {
        //1.打印一行的数据
        //printf(" %c | %c | %c\n",board[i][0],board[i][1],board[i][2]);
        int j = 0;
        for (j=0;j<col;j++)
        {
            printf(" %c ",board[i][j]);
            if (j<col-1)
            printf("|");

        }
        printf("\n");
        //2.打印分割行
        if (i<row-1)
        {//printf("---|---|---\n");
            for (j=0;j<col;j++)
            {
                printf("---");
                if (j<col-1)
                {
                    printf("|");
                }
            }
            printf("\n");
        }
    }
}
void PlayerMove(char board[ROW][COL],int row,int col)
{
    int x = 0;
    int y = 0;
    printf("玩家走:>\n");
    while (1)
    {
        printf("请输入坐标:>");
        scanf("%d%d",&x,&y);
        if (x>=1 && x<=row && y>=1 && y<=col)//判断x，y坐标的合法性
        {
            if (board[x-1][y-1] == ' ')
            {
                board[x-1][y-1] = '*';
                break;
            }
            else
            {
                printf("该坐标已被占用！\n");
            }
        }
        else
        {
            printf("坐标非法，请重新输入!\n");
        }
    }
}
void ComputerMove(char board[ROW][COL],int row,int col)
{
    printf("电脑走:>\n");
    int x = 0;
    int y = 0;
    while (1)
    {
        x = rand()%row;//对随机数取模
        y = rand()%col;
        if (board[x][y] == ' ')
        {
            board[x][y] = '#';
            break;
        }
    }
}
int IsFull(char board[ROW][COL],int row,int col)
{
    int i = 0;
    int j = 0;
    for (i=0;i<row;i++)
    {
        for (j=0;j<col;j++)
        {
            if (board[i][j] == ' ')
                return 0;//棋盘没满
        }
    }
    return 1;//棋盘满了
}
char IsWin(char board[ROW][COL],int row,int col)
{
    //玩家赢，返回‘*’；
    //电脑赢，返回‘#’；
    //平局，返回‘C’；
    //继续，返回‘Q’；
    int i = 0;
    for (i=0;i<row;i++)
    {
        //判断行
        if (board[i][0] == board[i][1] && board[i][1] == board[i][2] && board[i][1] != ' ')
        {
            return board[i][1];
        }
    }
    for (i=0;i<col;i++)
    {
        //判断列
        if (board[0][i] == board[1][i] && board[1][i] == board[2][i] && board[1][i] != ' ')
        {
            return board[1][i];
        }
    }
    //判断对角线
    if (board[0][0] == board[1][1] && board[1][1] == board[2][2] && board[1][1] != ' ')
    {
        return board[1][1];
    }
    if (board[0][2] == board[1][1] && board[1][1] == board[2][0] && board[1][1] != ' ')
    {
        return board[1][1];
    }
    if (IsFull(board,ROW,COL) == 1)//判断棋盘是否下满
    {
        return 'Q';
    }
    return 'C';
}
void game()//游戏的算法实现
{
    char ret = 0;
    char board[ROW][COL] = {0};//数组-存放棋盘信息
    InitBoard(board,ROW,COL);//初始化数组
    DisplayBoard(board,ROW,COL);//打印棋盘
    while (1)//下棋
    {
        PlayerMove(board,ROW,COL);//玩家下棋
        DisplayBoard(board,ROW,COL);//打印棋盘
        ret = IsWin(board,ROW,COL);//判断玩家是否赢
        if (ret != 'C')
        {
            break;
        }
        ComputerMove(board,ROW,COL);//电脑下棋
        DisplayBoard(board,ROW,COL);//打印棋盘
        ret = IsWin(board,ROW,COL);//判断电脑是否赢
        if (ret != 'C')
        {
            break;
        }
    }
    if (ret == '*')
    {
        printf("玩家赢\n");
    }
    else if (ret == '#')
    {
        printf("电脑赢\n");
    }
    else if (ret == 'Q')
    {
        printf("平局\n");
    }
}
void test()
{
    srand((unsigned int)time(NULL));//生成随机数
    int input = 0;
    do {
        menu();
        printf("请选择:>");
        scanf("%d",&input);
        switch (input) {
            case 1:
                game();
                break;
            case 0:
                printf("退出游戏\n");
                break;
            default:
                printf("选择错误，请重新选择\n");
                break;
        }
    }
    while (input);
}
int main()
{
    test();
    return 0;
}


